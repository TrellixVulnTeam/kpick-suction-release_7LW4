from ketisdk.import_basic_utils import *
from ketisdk.vision.base.base_objects import DetGui as DetGui
from ketisdk.vision.detector.classifier.roi_classifier import RoiCifarClassfier as RoiCifarClassfier
from ketisdk.vision.detector.pick.base_grasp_detection import BaseGraspDetector as BaseGraspDetector
from torchvision.transforms import transforms as transforms
from typing import Any, Optional

class SuctionDetector(BaseGraspDetector):
    def find_candidates(self, rgbd: Any): ...
    def get_grasp_in_workspace(self, rgbd: Any, Suction: Any, all_boxes: Any): ...
    def remove_grasp_on_background(self, rgbd: Any, Suction: Any, all_boxes: Any): ...
    def wrap_suction_from_boxes(self, rgbd: Any, all_boxes: Any): ...
    def score_suction(self, array: Any, all_boxes: Any): ...
    def average_score_suction(self, rgbd: Any, Suction: Any): ...
    def sort_suction(self, Suction: Any): ...
    gidx: Any = ...
    def detect_poses(self, rgbd: Any, remove_bg: bool = ...): ...
    def detect_and_show_poses(self, rgbd: Any, remove_bg: bool = ..., disp_mode: str = ..., detected: Optional[Any] = ...): ...
    def detect_and_show_step0(self, rgbd: Any, disp_mode: str = ...): ...
    def detect_and_show_step1(self, rgbd: Any, disp_mode: str = ...): ...
    def detect_and_show_step2(self, rgbd: Any, disp_mode: str = ...): ...

class SuctionGuiDetector(SuctionDetector, DetGui):
    def gui_process_single(self, rgbd: Any, method_ind: int = ..., filename: str = ..., disp_mode: str = ..., detected: Optional[Any] = ...): ...

def test_suction_detector(cfg_path: Any) -> None: ...
